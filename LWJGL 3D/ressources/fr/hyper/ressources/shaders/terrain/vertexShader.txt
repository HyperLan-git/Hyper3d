#version 400 core

in vec3 position;
in vec2 textures;
in vec3 normals;

out vec2 texCoords;
out vec3 norms;
out vec3 lightVector[6];
out vec3 reflexionVector;
out float lightDistance[6];
out float visibility;

uniform mat4 userMatrix;
uniform mat4 transformationMatrix;
uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform vec3 lightPosition[6];

uniform float fogDensity;
uniform float fogGradient;

float calculateVisibility(vec4 posRelativeToCam) {
	float dist = length(posRelativeToCam.xyz);
	float result = exp(-pow(dist*fogDensity, fogGradient));
	result = clamp(result, 0.0, 1.0);
	return result;
}

void main() {
	vec4 worldPosition = transformationMatrix * vec4(position, 1.0);
	vec4 positionRelativeToCam = viewMatrix * worldPosition;
	gl_Position = projectionMatrix * userMatrix * positionRelativeToCam;
	texCoords = textures;

	norms = (transformationMatrix * userMatrix * vec4(normals, 0.0)).xyz;
	
	for(int i = 0; i < 6; i++) {
		lightDistance[i] = distance(worldPosition, vec4(lightPosition[i], worldPosition.a));
		lightVector[i] = (vec4(lightPosition[i], 1.0) * inverse(projectionMatrix)).xyz - position.xyz;
	}
	reflexionVector = (inverse(viewMatrix) * vec4(0.0, 0.0, 0.0, 1.0)).xyz - worldPosition.xyz;
	visibility = calculateVisibility(positionRelativeToCam);
}