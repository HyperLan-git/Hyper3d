#version 400 core

in vec2 texCoords;
in vec3 norms;
in vec3 lightVector[6];
in vec3 reflexionVector;
in float lightDistance[6];
in float visibility;

out vec4 finalColor;

uniform sampler2D textureSampler;
uniform float lightPower[6];
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 lightColor[6];
uniform vec3 clearColor;

vec4 calculateSpecular(vec3 unitNormal, int light) {
	vec3 unitReflexion = normalize(reflexionVector);
	vec3 reflectedLight = reflect(-unitReflexion, unitNormal);
	float specularFactor = dot(reflectedLight, unitReflexion);
	specularFactor = max(specularFactor, 0.0) * 250 / (lightDistance[light] * lightDistance[light]);
	float dampedFactor = pow(specularFactor, shineDamper);
	vec3 finalSpecular = dampedFactor * lightColor[light] * reflectivity * lightPower[light];
	return vec4(finalSpecular, 0.0);
}

void main() {
	if(texture(textureSampler, texCoords).a < 0.1 || visibility < 0.01)
		discard;
	vec3 unitNormal = normalize(norms);
	vec3 diffuse = vec3(0.0, 0.0, 0.0);
	for(int i = 0; i < 6; i++) {
		vec3 unitLight = normalize(lightVector[i]);
	
		float product = dot(unitNormal, unitLight);
		float brightness = max(product, 0.2) * 250 / (lightDistance[i] * lightDistance[i]);
		diffuse += brightness * lightColor[i] * lightPower[i];
	}
	finalColor = texture(textureSampler, texCoords) * normalize(vec4(diffuse, 1.0));
	for(int j = 0; j < 6; j++) {
		finalColor += calculateSpecular(unitNormal, j);
	}
	finalColor = mix(vec4(clearColor, 1.0), finalColor, visibility);
}